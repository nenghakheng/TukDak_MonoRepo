{"version":3,"file":"database.service.js","sourceRoot":"","sources":["database.service.ts"],"names":[],"mappings":"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","sourcesContent":["import Database from 'better-sqlite3';\nimport * as path from 'path';\nimport * as fs from 'fs';\n\nexport interface DatabaseHealth {\n  connected: boolean;\n  tablesExist: boolean;\n  recordCount: number;\n  lastBackup?: string;\n  databaseSize: string;\n}\n\n// Add interface for database statistics\nexport interface GuestStatistics {\n  total_guests: number;\n  total_khr: number | null;\n  total_usd: number | null;\n  paid_guests: number;\n  duplicates: number;\n}\n\nexport interface DatabaseStatistics extends GuestStatistics {\n  activity_logs: number;\n  unresolved_errors: number;\n}\n\nexport class DatabaseService {\n  private static instance: DatabaseService;\n  private db: Database.Database | null = null;\n  private dbPath: string;\n\n  private constructor() {\n    // Use data directory for database file\n    const dataDir = path.join(process.cwd(), 'data');\n    this.dbPath = path.join(dataDir, 'tukdak.db');\n  }\n\n  static getInstance(): DatabaseService {\n    if (!DatabaseService.instance) {\n      DatabaseService.instance = new DatabaseService();\n    }\n    return DatabaseService.instance;\n  }\n\n  async initialize(): Promise<void> {\n    console.log('üîÑ Initializing database...');\n    \n    try {\n      // Ensure data directory exists\n      const dataDir = path.dirname(this.dbPath);\n      if (!fs.existsSync(dataDir)) {\n        fs.mkdirSync(dataDir, { recursive: true, mode: 0o755 });\n        console.log('üìÅ Created data directory');\n      }\n\n      // Create database connection\n      this.db = new Database(this.dbPath);\n      \n      // Configure SQLite for better performance\n      this.db.pragma('journal_mode = WAL');\n      this.db.pragma('synchronous = NORMAL');\n      this.db.pragma('cache_size = 1000');\n      this.db.pragma('temp_store = memory');\n      this.db.pragma('foreign_keys = ON');\n      \n      console.log(`üìä Database connected: ${this.dbPath}`);\n\n      // Create tables if they don't exist\n      await this.createTables();\n      \n      console.log('‚úÖ Database initialization completed');\n      \n    } catch (error) {\n      console.error('‚ùå Database initialization failed:', error);\n      throw error;\n    }\n  }\n\n  private async createTables(): Promise<void> {\n    if (!this.db) {\n      throw new Error('Database not initialized');\n    }\n\n    const createTablesSQL = `\n      -- Create guestlist table\n      CREATE TABLE IF NOT EXISTS guestlist (\n        guest_id TEXT PRIMARY KEY,\n        name TEXT NOT NULL,\n        english_name TEXT,\n        khmer_name TEXT,\n        amount_khr REAL DEFAULT 0,\n        amount_usd REAL DEFAULT 0,\n        payment_method TEXT CHECK (payment_method IN ('QR_Code', 'Cash')) NULL,\n        guest_of TEXT NOT NULL CHECK (guest_of IN ('Bride', 'Groom', 'Bride_Parents', 'Groom_Parents')),\n        is_duplicate INTEGER DEFAULT 0 CHECK (is_duplicate IN (0, 1)),\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP\n      );\n\n      -- Create activity_logs table\n      CREATE TABLE IF NOT EXISTS activity_logs (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        guest_id TEXT NOT NULL,\n        action TEXT NOT NULL CHECK (action IN ('created', 'updated', 'deleted', 'payment_received', 'duplicate_marked', 'duplicate_resolved', 'searched')),\n        old_amount_khr REAL,\n        new_amount_khr REAL,\n        old_amount_usd REAL,\n        new_amount_usd REAL,\n        details TEXT,\n        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP\n      );\n\n      -- Create error_logs table\n      CREATE TABLE IF NOT EXISTS error_logs (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        error_type TEXT NOT NULL,\n        error_message TEXT NOT NULL,\n        stack_trace TEXT,\n        request_path TEXT,\n        request_method TEXT,\n        user_agent TEXT,\n        ip_address TEXT,\n        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,\n        resolved INTEGER DEFAULT 0\n      );\n\n      -- Create basic indexes\n      CREATE INDEX IF NOT EXISTS idx_guestlist_guest_of ON guestlist (guest_of);\n      CREATE INDEX IF NOT EXISTS idx_guestlist_payment_method ON guestlist (payment_method);\n      CREATE INDEX IF NOT EXISTS idx_guestlist_is_duplicate ON guestlist (is_duplicate);\n      CREATE INDEX IF NOT EXISTS idx_guestlist_created_at ON guestlist (created_at);\n      CREATE INDEX IF NOT EXISTS idx_activity_logs_guest_id ON activity_logs (guest_id);\n      CREATE INDEX IF NOT EXISTS idx_activity_logs_timestamp ON activity_logs (timestamp);\n    `;\n\n    // Execute all table creation statements\n    this.db.exec(createTablesSQL);\n    console.log('üìã Database tables created/verified');\n  }\n\n  getConnection(): { getDatabase: () => Database.Database } {\n    if (!this.db) {\n      throw new Error('Database not initialized. Call initialize() first.');\n    }\n\n    return {\n      getDatabase: () => this.db!\n    };\n  }\n\n  async healthCheck(): Promise<DatabaseHealth> {\n    try {\n      if (!this.db) {\n        return {\n          connected: false,\n          tablesExist: false,\n          recordCount: 0,\n          databaseSize: '0 KB'\n        };\n      }\n\n      // Check if database is responsive\n      const testQuery = this.db.prepare('SELECT 1 as test').get() as { test: number };\n      const connected = testQuery.test === 1;\n\n      // Check if main tables exist\n      const tables = this.db.prepare(`\n        SELECT name FROM sqlite_master \n        WHERE type='table' AND name IN ('guestlist', 'activity_logs', 'error_logs')\n      `).all() as { name: string }[];\n      const tablesExist = tables.length === 3;\n\n      // Get record count\n      let recordCount = 0;\n      if (tablesExist) {\n        const countResult = this.db.prepare('SELECT COUNT(*) as count FROM guestlist').get() as { count: number };\n        recordCount = countResult.count;\n      }\n\n      // Get database file size\n      let databaseSize = '0 KB';\n      try {\n        const stats = fs.statSync(this.dbPath);\n        const sizeInKB = Math.round(stats.size / 1024);\n        databaseSize = `${sizeInKB} KB`;\n      } catch (error) {\n        console.warn('Could not get database file size:', error);\n      }\n\n      return {\n        connected,\n        tablesExist,\n        recordCount,\n        databaseSize\n      };\n\n    } catch (error) {\n      console.error('Health check failed:', error);\n      return {\n        connected: false,\n        tablesExist: false,\n        recordCount: 0,\n        databaseSize: '0 KB'\n      };\n    }\n  }\n\n  async close(): Promise<void> {\n    if (this.db) {\n      try {\n        this.db.close();\n        this.db = null;\n        console.log('üìä Database connection closed');\n      } catch (error) {\n        console.error('Error closing database:', error);\n        throw error;\n      }\n    }\n  }\n\n  closeConnection(): void {\n    if (this.db) {\n      try {\n        this.db.close();\n        this.db = null;\n        console.log('üìä Database connection closed');\n      } catch (error) {\n        console.error('Error closing database:', error);\n      }\n    }\n  }\n\n  // Backup functionality\n  async createBackup(backupPath?: string): Promise<string> {\n    if (!this.db) {\n      throw new Error('Database not initialized');\n    }\n\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n    const defaultBackupPath = path.join(\n      path.dirname(this.dbPath), \n      `backup_${timestamp}.db`\n    );\n    \n    const finalBackupPath = backupPath || defaultBackupPath;\n\n    try {\n      // Use SQLite backup API\n      this.db.backup(finalBackupPath);\n      console.log(`üíæ Database backup created: ${finalBackupPath}`);\n      return finalBackupPath;\n    } catch (error) {\n      console.error('Backup creation failed:', error);\n      throw error;\n    }\n  }\n\n  // Get database statistics - Fixed with proper typing\n  async getStatistics(): Promise<DatabaseStatistics> {\n    if (!this.db) {\n      throw new Error('Database not initialized');\n    }\n\n    try {\n      // Properly type the guest statistics query\n      const guestStats = this.db.prepare(`\n        SELECT \n          COUNT(*) as total_guests,\n          COALESCE(SUM(amount_khr), 0) as total_khr,\n          COALESCE(SUM(amount_usd), 0) as total_usd,\n          COUNT(CASE WHEN amount_khr > 0 OR amount_usd > 0 THEN 1 END) as paid_guests,\n          COUNT(CASE WHEN is_duplicate = 1 THEN 1 END) as duplicates\n        FROM guestlist\n      `).get() as GuestStatistics;\n\n      // Properly type the activity count query\n      const activityCount = this.db.prepare('SELECT COUNT(*) as count FROM activity_logs').get() as { count: number };\n      \n      // Properly type the error count query\n      const errorCount = this.db.prepare('SELECT COUNT(*) as count FROM error_logs WHERE resolved = 0').get() as { count: number };\n\n      return {\n        total_guests: guestStats.total_guests,\n        total_khr: guestStats.total_khr,\n        total_usd: guestStats.total_usd,\n        paid_guests: guestStats.paid_guests,\n        duplicates: guestStats.duplicates,\n        activity_logs: activityCount.count,\n        unresolved_errors: errorCount.count\n      };\n    } catch (error) {\n      console.error('Failed to get database statistics:', error);\n      throw error;\n    }\n  }\n}"]}