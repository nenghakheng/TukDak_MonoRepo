{"version":3,"file":"migrations.js","sourceRoot":"","sources":["migrations.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from 'fs';\nimport * as path from 'path';\nimport { DatabaseService } from './database.service';\n\ninterface Migration {\n  id: number;\n  filename: string;\n  applied_at: string;\n}\n\nclass MigrationRunner {\n  private dbService: DatabaseService;\n  private migrationsDir: string;\n\n  constructor() {\n    this.dbService = DatabaseService.getInstance();\n    this.migrationsDir = path.join(process.cwd(), 'database', 'migrations');\n  }\n\n  async init(): Promise<void> {\n    await this.dbService.initialize();\n    \n    const db = this.dbService.getConnection().getDatabase();\n    \n    db.exec(`\n      CREATE TABLE IF NOT EXISTS migrations (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        filename TEXT UNIQUE NOT NULL,\n        applied_at DATETIME DEFAULT CURRENT_TIMESTAMP\n      )\n    `);\n  }\n\n  async getAppliedMigrations(): Promise<Migration[]> {\n    const db = this.dbService.getConnection().getDatabase();\n    const migrations = db.prepare('SELECT * FROM migrations ORDER BY id').all() as Migration[];\n    return migrations;\n  }\n\n  async getMigrationFiles(): Promise<string[]> {\n    if (!fs.existsSync(this.migrationsDir)) {\n      fs.mkdirSync(this.migrationsDir, { recursive: true });\n      console.log(`üìÅ Created migrations directory: ${this.migrationsDir}`);\n      \n      // Create safer migration that checks for column existence\n      const sampleMigration = `-- Migration: Add search optimization indexes\n-- Created: ${new Date().toISOString()}\n-- Description: Adds search indexes and english_name/khmer_name columns for guest search functionality\n\n-- Note: SQLite doesn't support IF NOT EXISTS for ALTER TABLE ADD COLUMN\n-- These will be handled by the migration runner to ignore duplicate column errors\n\n-- Add new columns for search functionality\nALTER TABLE guestlist ADD COLUMN english_name TEXT;\nALTER TABLE guestlist ADD COLUMN khmer_name TEXT;\n\n-- Add indexes for search performance\nCREATE INDEX IF NOT EXISTS idx_guestlist_guest_id_lower ON guestlist (LOWER(guest_id));\nCREATE INDEX IF NOT EXISTS idx_guestlist_name_lower ON guestlist (LOWER(name));\nCREATE INDEX IF NOT EXISTS idx_guestlist_english_name_lower ON guestlist (LOWER(english_name));\nCREATE INDEX IF NOT EXISTS idx_guestlist_khmer_name_lower ON guestlist (LOWER(khmer_name));\nCREATE INDEX IF NOT EXISTS idx_guestlist_is_duplicate ON guestlist (is_duplicate);\nCREATE INDEX IF NOT EXISTS idx_guestlist_created_at ON guestlist (created_at);\n\n-- Composite indexes for common search patterns\nCREATE INDEX IF NOT EXISTS idx_guestlist_search_active ON guestlist (is_duplicate, created_at) WHERE is_duplicate = 0;\nCREATE INDEX IF NOT EXISTS idx_guestlist_guest_of_active ON guestlist (guest_of, is_duplicate) WHERE is_duplicate = 0;\nCREATE INDEX IF NOT EXISTS idx_guestlist_payment_method ON guestlist (payment_method);\n`;\n      \n      fs.writeFileSync(\n        path.join(this.migrationsDir, '001_add_search_optimization.sql'),\n        sampleMigration\n      );\n      console.log('üìù Created sample migration file');\n    }\n\n    const files = fs.readdirSync(this.migrationsDir)\n      .filter(file => file.endsWith('.sql'))\n      .sort();\n    return files;\n  }\n\n  async runMigrations(): Promise<void> {\n    await this.init();\n    \n    const appliedMigrations = await this.getAppliedMigrations();\n    const migrationFiles = await this.getMigrationFiles();\n    const appliedFilenames = appliedMigrations.map(m => m.filename);\n\n    console.log('üîÑ Starting database migrations...');\n    console.log(`üìÅ Found ${migrationFiles.length} migration files`);\n    console.log(`‚úÖ Already applied: ${appliedMigrations.length} migrations`);\n\n    let applied = 0;\n    for (const filename of migrationFiles) {\n      if (!appliedFilenames.includes(filename)) {\n        await this.runSingleMigration(filename);\n        applied++;\n      } else {\n        console.log(`‚è≠Ô∏è  Skipping ${filename} (already applied)`);\n      }\n    }\n\n    if (applied === 0) {\n      console.log('‚úÖ No new migrations to apply');\n    } else {\n      console.log(`‚úÖ Applied ${applied} new migrations successfully!`);\n    }\n  }\n\n  async runSingleMigration(filename: string): Promise<void> {\n    const db = this.dbService.getConnection().getDatabase();\n    const migrationPath = path.join(this.migrationsDir, filename);\n    \n    try {\n      console.log(`üîÑ Running migration: ${filename}`);\n      \n      const sql = fs.readFileSync(migrationPath, 'utf8');\n      \n      // Split SQL into individual statements\n      const statements = sql\n        .split(';')\n        .map(stmt => stmt.trim())\n        .filter(stmt => stmt.length > 0 && !stmt.startsWith('--'));\n\n      const transaction = db.transaction(() => {\n        for (const statement of statements) {\n          try {\n            db.exec(statement);\n          } catch (error: any) {\n            // Handle expected errors gracefully\n            if (error.message.includes('duplicate column name')) {\n              console.log(`‚ö†Ô∏è  Column already exists, skipping: ${statement.substring(0, 50)}...`);\n              continue;\n            }\n            if (error.message.includes('already exists')) {\n              console.log(`‚ö†Ô∏è  Object already exists, skipping: ${statement.substring(0, 50)}...`);\n              continue;\n            }\n            throw error;\n          }\n        }\n        \n        // Record that this migration was applied\n        db.prepare('INSERT INTO migrations (filename) VALUES (?)').run(filename);\n      });\n\n      transaction();\n      \n      console.log(`‚úÖ Successfully applied: ${filename}`);\n      \n    } catch (error) {\n      console.error(`‚ùå Failed to apply migration ${filename}:`, error);\n      throw error;\n    }\n  }\n\n  async rollbackLastMigration(): Promise<void> {\n    await this.init();\n    \n    const appliedMigrations = await this.getAppliedMigrations();\n    \n    if (appliedMigrations.length === 0) {\n      console.log('No migrations to rollback');\n      return;\n    }\n\n    const lastMigration = appliedMigrations[appliedMigrations.length - 1];\n    console.log(`üîÑ Rolling back migration: ${lastMigration.filename}`);\n    \n    const db = this.dbService.getConnection().getDatabase();\n    db.prepare('DELETE FROM migrations WHERE filename = ?').run(lastMigration.filename);\n    \n    console.log(`‚úÖ Rolled back: ${lastMigration.filename}`);\n    console.log('‚ö†Ô∏è  Note: You may need to manually undo schema changes');\n  }\n\n  async cleanup(): Promise<void> {\n    await this.dbService.close();\n  }\n}\n\n// CLI usage\nasync function main() {\n  const runner = new MigrationRunner();\n  \n  try {\n    const command = process.argv[2];\n    \n    switch (command) {\n      case 'up':\n        await runner.runMigrations();\n        break;\n      case 'rollback':\n        await runner.rollbackLastMigration();\n        break;\n      default:\n        console.log('Usage: npm run migrate [up|rollback]');\n        console.log('  up       - Run pending migrations');\n        console.log('  rollback - Rollback last migration');\n        process.exit(1);\n    }\n    \n    await runner.cleanup();\n    console.log('üéâ Migration process completed!');\n    process.exit(0);\n    \n  } catch (error) {\n    console.error('‚ùå Migration failed:', error);\n    try {\n      await runner.cleanup();\n    } catch (cleanupError) {\n      console.error('‚ùå Cleanup failed:', cleanupError);\n    }\n    process.exit(1);\n  }\n}\n\nif (require.main === module) {\n  main();\n}\n\nexport { MigrationRunner };"]}