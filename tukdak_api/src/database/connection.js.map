{"version":3,"file":"connection.js","sourceRoot":"","sources":["connection.ts"],"names":[],"mappings":"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","sourcesContent":["import Database from 'better-sqlite3';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport {DATABASE_SCHEMA} from '../src/schema/database-schema';\n\nexport interface DatabaseConfig {\n  filePath: string;\n  options?: Database.Options;\n  maxRetries?: number;\n  retryDelay?: number;\n}\n\nexport class DatabaseConnection {\n  private static instance: DatabaseConnection;\n  private db: Database.Database | null = null;\n  private config: DatabaseConfig;\n  private isInitialized = false;\n\n  constructor(config: DatabaseConfig) {\n    this.config = {\n      maxRetries: 3,\n      retryDelay: 1000,\n      options: {\n        verbose: process.env.NODE_ENV === 'development' ? console.log : undefined,\n        fileMustExist: false,\n      },\n      ...config,\n    };\n  }\n\n  static getInstance(config?: DatabaseConfig): DatabaseConnection {\n    if (!DatabaseConnection.instance) {\n      if (!config) {\n        throw new Error('Database configuration required for first initialization');\n      }\n      DatabaseConnection.instance = new DatabaseConnection(config);\n    }\n    return DatabaseConnection.instance;\n  }\n\n  async connect(): Promise<Database.Database> {\n    if (this.db && this.isInitialized) {\n      return this.db;\n    }\n\n    let lastError: Error | null = null;\n    \n    for (let attempt = 1; attempt <= this.config.maxRetries!; attempt++) {\n      try {\n        console.log(`Database connection attempt ${attempt}/${this.config.maxRetries}`);\n        \n        // Ensure data directory exists\n        const dataDir = path.dirname(this.config.filePath);\n        if (!fs.existsSync(dataDir)) {\n          fs.mkdirSync(dataDir, { recursive: true, mode: 0o755 });\n        }\n\n        // Create database connection\n        this.db = new Database(this.config.filePath, this.config.options);\n        \n        // Enable WAL mode for better concurrency\n        this.db.pragma('journal_mode = WAL');\n        \n        // Enable foreign key constraints\n        this.db.pragma('foreign_keys = ON');\n        \n        // Set busy timeout (30 seconds)\n        this.db.pragma('busy_timeout = 30000');\n        \n        // Optimize for performance\n        this.db.pragma('synchronous = NORMAL');\n        this.db.pragma('cache_size = 10000');\n        \n        // Test connection\n        this.db.prepare('SELECT 1').get();\n        \n        console.log(`‚úÖ Database connected successfully on attempt ${attempt}`);\n        \n        if (!this.isInitialized) {\n          await this.initializeSchema();\n          this.isInitialized = true;\n        }\n        \n        return this.db;\n        \n      } catch (error) {\n        lastError = error as Error;\n        console.error(`‚ùå Database connection attempt ${attempt} failed:`, error);\n        \n        if (this.db) {\n          try {\n            this.db.close();\n          } catch (closeError) {\n            console.error('Error closing database:', closeError);\n          }\n          this.db = null;\n        }\n        \n        if (attempt < this.config.maxRetries!) {\n          console.log(`Retrying in ${this.config.retryDelay}ms...`);\n          await new Promise(resolve => setTimeout(resolve, this.config.retryDelay));\n        }\n      }\n    }\n\n    throw new Error(`Failed to connect to database after ${this.config.maxRetries} attempts. Last error: ${lastError?.message}`);\n  }\n\n  private async initializeSchema(): Promise<void> {\n    if (!this.db) {\n      throw new Error('Database connection not established');\n    }\n\n    console.log('üîÑ Initializing database schema...');\n\n    // Create tables\n    this.db.exec(DATABASE_SCHEMA.GUESTLIST_TABLE);\n    this.db.exec(DATABASE_SCHEMA.ACTIVITY_LOGS_TABLE);\n    this.db.exec(DATABASE_SCHEMA.ERROR_LOGS_TABLE);\n\n    // Create indexes\n    DATABASE_SCHEMA.INDEXES.forEach(indexSql => {\n      this.db!.exec(indexSql);\n    });\n\n    // Create triggers\n    DATABASE_SCHEMA.TRIGGERS.forEach(triggerSql => {\n      this.db!.exec(triggerSql);\n    });\n\n    console.log('‚úÖ Database schema initialized successfully');\n  }\n\n  getDatabase(): Database.Database {\n    if (!this.db) {\n      throw new Error('Database not connected. Call connect() first.');\n    }\n    return this.db;\n  }\n\n  async close(): Promise<void> {\n    if (this.db) {\n      try {\n        this.db.close();\n        console.log('‚úÖ Database connection closed');\n      } catch (error) {\n        console.error('‚ùå Error closing database:', error);\n        throw error;\n      } finally {\n        this.db = null;\n        this.isInitialized = false;\n      }\n    }\n  }\n\n  // Health check method\n  async healthCheck(): Promise<{connected: boolean; tablesExist: boolean; error?: string}> {\n    try {\n      if (!this.db) {\n        return {connected: false, tablesExist: false, error: 'No database connection'};\n      }\n\n      // Test basic query\n      this.db.prepare('SELECT 1').get();\n\n      // Check if tables exist\n      const tables = this.db.prepare(`\n        SELECT name FROM sqlite_master \n        WHERE type='table' AND name IN ('guestlist', 'activity_logs', 'error_logs')\n      `).all();\n\n      return {\n        connected: true,\n        tablesExist: tables.length === 3,\n      };\n    } catch (error) {\n      return {\n        connected: false,\n        tablesExist: false,\n        error: (error as Error).message,\n      };\n    }\n  }\n}"]}